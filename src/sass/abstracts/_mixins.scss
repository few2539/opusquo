

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin font-no-smoothing {
  -webkit-font-smoothing: initial;
  -moz-osx-font-smoothing: initial;
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

@mixin flex-center() {
  display:  flex;
  justify-content: center;
  align-items: center;
}

@mixin flexRow() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-flow: row wrap;
}
@mixin flexColumn() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
  flex-flow: column wrap;
}

@mixin anchor-all($value: auto) {
  top: $value;
  right: $value;
  bottom: $value;
  left: $value;
}

@mixin padd-vert($value: 0) {
  padding-top: $value;
  padding-bottom: $value;
}
@mixin padd-horz($value: 0) {
  padding-left: $value;
  padding-right: $value;
}
@mixin mgn-vert($size: auto) {
  margin-top: $size;
  margin-bottom: $size;
}
@mixin mgn-horz($size: auto) {
  margin-left: $size;
  margin-right: $size;
}

@mixin anim($value: none) {
  -webkit-animation: $value;
  -o-animation: $value;
  animation: $value;
}

@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}

@mixin transtn($value: none) {
  -moz-transition: $value;
  -ms-transition: $value;
  -webkit-transition: $value;
  -o-transition: $value;
  transition: $value;
}

@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin fp($property, $min, $max, $start:320, $end:1380, $clip: true, $sourceUnit:vw, $clipAtStart: true, $clipAtEnd: true) {

    $multiplier: ($max - $min) / ($end - $start) * 100;
    $adder: ($min * $end - $max * $start) / ($end - $start);

    $formula: calc(#{$multiplier + $sourceUnit} + #{$adder + 0px});

    @if($clip and $clipAtStart){
        @media (max-width: #{$start + 0px}) {
            #{$property}: $min + 0px;
        }
    }

    @if($clip and $clipAtEnd){
        @media (min-width: #{$end + 0px}) {
            #{$property}: $max + 0px;
            
        }
    }
    #{$property}: $formula;

}



@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    -webkit-transform: translateX(-50%) translateY(-50%);
            transform: translateX(-50%) translateY(-50%);
  }
  @else if $xy == x {
    left: 50%;
    right: auto;
    -webkit-transform: translateX(-50%);
            transform: translateX(-50%);
  }
  @else if $xy == y {
    top: 50%;
    bottom: auto;
    -webkit-transform: translateY(-50%);
            transform: translateY(-50%);
  }
}

@mixin box-shadow($shadow...) {
  @if $enable-shadows {
    box-shadow: $shadow;
  }
}

@mixin transition($transition...) {
  @if $enable-transitions {
    @if length($transition) == 0 {
      transition: $transition-base;
    } @else {
      transition: $transition;
    }
  }
}

// Utilities
@import "../mixins/breakpoints";
// @import "mixins/hover";
// @import "mixins/image";
// @import "mixins/badge";
// @import "mixins/resize";
// @import "mixins/screen-reader";
// @import "mixins/size";
// @import "mixins/reset-text";
// @import "mixins/text-emphasis";
// @import "mixins/text-hide";
// @import "mixins/text-truncate";
// @import "mixins/transforms";
// @import "mixins/visibility";

// // Components
// @import "mixins/alert";
// @import "mixins/buttons";
// @import "mixins/cards";
// @import "mixins/pagination";
// @import "mixins/lists";
// @import "mixins/list-group";
// @import "mixins/nav-divider";
// @import "mixins/forms";
// @import "mixins/table-row";

// Skins
// @import "mixins/background-variant";
// @import "mixins/border-radius";
// @import "mixins/gradients";

// // Layout
@import "../mixins/clearfix";
// @import "mixins/navbar-align";
// @import "mixins/grid-framework";
// @import "mixins/grid";
// @import "mixins/float";


@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;
  @each $key, $num in $map {
    @if $prev-num == null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num >= $num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }
    $prev-key: $key;
    $prev-num: $num;
  }
}

// Replace `$search` with `$replace` in `$string`
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);
  @if $first-value != 0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}

@mixin angle($pseudo, $flip: false, $angle: 5deg) {
  // Possible values for $pseudo are: before, after, both
  @if $pseudo == 'before' or $pseudo == 'after' or $pseudo == 'both' {
    position: relative;
    z-index: 1;
    $selector: if($pseudo == 'both', '&:before,&:after', '&:#{$pseudo}');

    #{$selector} {
      background: inherit;
      content: '';
      display: block;
      height: 100%;
      left: 0;
      position: absolute;
      right: 0;
      z-index: -1;
      -webkit-backface-visibility: hidden; // for Chrome Windows
    }

    @if $pseudo == 'before' {
      #{$selector} {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }
    }

    @if $pseudo == 'after' {
      #{$selector} {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 100%;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }

    @if $pseudo == 'both' {
      &:before {
        top: 0;

        @if $flip {
          transform: skewY($angle * -1);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle);
          transform-origin: 100% 0;
        }
      }

      &:after {
        bottom: 0;

        @if $flip {
          transform: skewY($angle);
          transform-origin: 0 0;
        } @else {
          transform: skewY($angle * -1);
          transform-origin: 100%;
        }
      }
    }
  }
}
